{"version":3,"sources":["../src/Bugsnag.js"],"names":["NativeClient","NativeModules","BugsnagReactNative","BREADCRUMB_MAX_LENGTH","CONSOLE_LOG_METHODS","filter","console","method","Client","apiKeyOrConfig","handleUncaughtErrors","ErrorUtils","previousHandler","getGlobalHandler","setGlobalHandler","error","isFatal","config","autoNotify","shouldNotify","notify","report","metadata","additionalParams","setTimeout","HandledState","handlePromiseRejections","tracking","require","client","enable","allRejections","onUnhandled","id","onHandled","beforeSendCallback","blocking","postSendCallback","_handledState","Error","warn","Report","apiKey","addMetadata","codeBundleId","beforeSendCallbacks","callback","payload","toJSON","then","setUser","name","email","safeStringify","String","value","e","undefined","clearUser","startSession","stopSession","resumeSession","leaveBreadcrumb","length","includes","type","breadcrumbMetaData","enableConsoleBreadcrumbs","forEach","originalFn","args","severity","test","message","map","stringified","arg","JSON","stringify","join","apply","_restore","disableConsoleBreadCrumbs","Configuration","startWithOptions","consoleBreadcrumbsEnabled","releaseStage","notifyReleaseStages","registerBeforeSendCallback","push","unregisterBeforeSendCallback","index","indexOf","splice","clearBeforeSendCallbacks","endpoint","delivery","sessionsEndpoint","appVersion","version","autoCaptureSessions","automaticallyCollectBreadcrumbs","StandardDelivery","__DEV__","originalSeverity","unhandled","severityReason","section","key","defaultSeverity","isValidReason","severityType","isUnhandled","context","errorClass","errorMessage","groupingHash","stacktrace","user","constructor","stack"],"mappings":"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","file":"Bugsnag.js","sourcesContent":["/* global ErrorUtils, __DEV__ */\n\nimport { NativeModules } from 'react-native'\nimport serializeForNativeLayer from './NativeSerializer'\n\nconst NativeClient = NativeModules.BugsnagReactNative\n\nconst BREADCRUMB_MAX_LENGTH = 30\nconst CONSOLE_LOG_METHODS = [ 'log', 'debug', 'info', 'warn', 'error' ].filter(method =>\n  typeof console[method] === 'function'\n)\n\n/**\n * A Bugsnag monitoring and reporting client\n */\nexport class Client {\n  /**\n   * Creates a new Bugsnag client\n   */\n  constructor (apiKeyOrConfig) {\n    if (typeof apiKeyOrConfig === 'string' || typeof apiKeyOrConfig === 'undefined') {\n      this.config = new Configuration(apiKeyOrConfig)\n    } else if (apiKeyOrConfig instanceof Configuration) {\n      this.config = apiKeyOrConfig\n    } else {\n      throw new Error('Bugsnag: A client must be constructed with an API key or Configuration')\n    }\n\n    if (NativeClient) {\n      NativeClient.startWithOptions(this.config.toJSON())\n      this.handleUncaughtErrors()\n      if (this.config.handlePromiseRejections) { this.handlePromiseRejections() }\n      if (this.config.consoleBreadcrumbsEnabled) { this.enableConsoleBreadcrumbs() }\n    } else {\n      throw new Error('Bugsnag: No native client found. Is BugsnagReactNative installed in your native code project?')\n    }\n  }\n\n  /**\n   * Registers a global error handler which sends any uncaught error to\n   * Bugsnag before invoking the previous handler, if any.\n   */\n  handleUncaughtErrors = () => {\n    if (ErrorUtils) {\n      const previousHandler = ErrorUtils.getGlobalHandler()\n\n      ErrorUtils.setGlobalHandler((error, isFatal) => {\n        if (this.config.autoNotify && this.config.shouldNotify()) {\n          this.notify(error, (report) => {\n            report.metadata = {\n              ...report.metadata,\n              additionalParams: {\n                isFatal\n              },\n            };\n          }, true, () => {\n            if (previousHandler) {\n              // Wait 150ms before terminating app, allowing native processing\n              // to complete, if any. On iOS in particular, there is no\n              // synchronous means ensure a report delivery attempt is\n              // completed before invoking callbacks.\n              setTimeout(() => {\n                previousHandler(error, isFatal)\n              }, 150)\n            }\n          }, new HandledState('error', true, 'unhandledException'))\n        } else if (previousHandler) {\n          previousHandler(error, isFatal)\n        }\n      })\n    }\n  }\n\n  handlePromiseRejections = () => {\n    const tracking = require('promise/setimmediate/rejection-tracking')\n    const client = this\n    tracking.enable({\n      allRejections: true,\n      onUnhandled: function (id, error) {\n        client.notify(error, null, true, null, new HandledState('error', true, 'unhandledPromiseRejection'))\n      },\n      onHandled: function () {}\n    })\n  }\n\n  /**\n   * Sends an error report to Bugsnag\n   * @param error               The error instance to report\n   * @param beforeSendCallback  A callback invoked before the report is sent\n   *                            so additional information can be added\n   * @param postSendCallback    Callback invoked after request is queued\n   */\n  notify = async (error, beforeSendCallback, blocking, postSendCallback, _handledState) => {\n    if (!(error instanceof Error)) {\n      console.warn('Bugsnag could not notify: error must be of type Error')\n      if (postSendCallback) { postSendCallback(false) }\n      return\n    }\n    if (!this.config.shouldNotify()) {\n      if (postSendCallback) { postSendCallback(false) }\n      return\n    }\n\n    const report = new Report(this.config.apiKey, error, _handledState)\n    report.addMetadata('app', 'codeBundleId', this.config.codeBundleId)\n\n    for (const callback of this.config.beforeSendCallbacks) {\n      if (callback(report, error) === false) {\n        if (postSendCallback) { postSendCallback(false) }\n        return\n      }\n    }\n    if (beforeSendCallback) {\n      beforeSendCallback(report)\n    }\n\n    const payload = report.toJSON()\n    payload.blocking = !!blocking\n\n    NativeClient.notify(payload).then(() => {\n      if (postSendCallback) {\n        postSendCallback()\n      }\n    })\n  }\n\n  setUser = (id, name, email) => {\n    const safeStringify = value => {\n      try {\n        return String(value)\n      } catch (e) {\n        // calling String() on an object with a null\n        // prototype can throw, so tolerate that here\n        return undefined\n      }\n    }\n\n    // the native setUser() fn only accepts strings so coerce each values\n    id = safeStringify(id)\n    name = safeStringify(name)\n    email = safeStringify(email)\n\n    NativeClient.setUser({ id, name, email })\n  }\n\n  /**\n   * Clear custom user data and reset to the default device identifier\n   */\n  clearUser = () => {\n    NativeClient.clearUser()\n  }\n\n  /**\n   * Starts tracking a new session. You should disable automatic session tracking via\n   * `autoCaptureSessions` if you call this method.\n   *\n   * You should call this at the appropriate time in your application when you wish to start a\n   * session. Any subsequent errors which occur in your application will be reported to\n   * Bugsnag and will count towards your application's\n   * [stability score](https://docs.bugsnag.com/product/releases/releases-dashboard/#stability-score).\n   * This will start a new session even if there is already an existing\n   * session; you should call `resumeSession()` if you only want to start a session\n   * when one doesn't already exist.\n   *\n   * @see `resumeSession()`\n   * @see `stopSession()`\n   * @see `autoCaptureSessions`\n   */\n  startSession = () => {\n    NativeClient.startSession()\n  }\n\n  /**\n   * Stops tracking a session. You should disable automatic session tracking via\n   * `autoCaptureSessions` if you call this method.\n   *\n   * You should call this at the appropriate time in your application when you wish to stop a\n   * session. Any subsequent errors which occur in your application will still be reported to\n   * Bugsnag but will not count towards your application's\n   * [stability score](https://docs.bugsnag.com/product/releases/releases-dashboard/#stability-score).\n   * This can be advantageous if, for example, you do not wish the\n   * stability score to include crashes in a background service.\n   *\n   * @see `startSession()`\n   * @see `resumeSession()`\n   * @see `autoCaptureSessions`\n   */\n  stopSession = () => {\n    NativeClient.stopSession()\n  }\n\n  /**\n   * Resumes a session which has previously been stopped, or starts a new session if none exists.\n   * If a session has already been resumed or started and has not been stopped, calling this\n   * method will have no effect. You should disable automatic session tracking via\n   * `autoCaptureSessions` if you call this method.\n   *\n   * It's important to note that sessions are stored in memory for the lifetime of the\n   * application process and are not persisted on disk. Therefore calling this method on app\n   * startup would start a new session, rather than continuing any previous session.\n   *\n   * You should call this at the appropriate time in your application when you wish to resume\n   * a previously started session. Any subsequent errors which occur in your application will\n   * be reported to Bugsnag and will count towards your application's\n   * [stability score](https://docs.bugsnag.com/product/releases/releases-dashboard/#stability-score).\n   *\n   * @see `startSession()`\n   * @see `stopSession()`\n   * @see `autoCaptureSessions`\n   */\n  resumeSession = () => {\n    NativeClient.resumeSession()\n  }\n\n  /**\n   * Leaves a 'breadcrumb' log message. The most recent breadcrumbs\n   * are attached to subsequent error reports.\n   */\n  leaveBreadcrumb = (name, metadata) => {\n    if (typeof name !== 'string') {\n      console.warn(`Breadcrumb name must be a string, got '${name}'. Discarding.`)\n      return\n    }\n\n    if (name.length > BREADCRUMB_MAX_LENGTH) {\n      console.warn(`Breadcrumb name exceeds ${BREADCRUMB_MAX_LENGTH} characters (it has ${name.length}): ${name}. It will be truncated.`)\n    }\n\n    // Checks for both `null` and `undefined`.\n    if ([ undefined, null ].includes(metadata)) {\n      metadata = {}\n    } else if (typeof metadata === 'string') {\n      metadata = { 'message': metadata }\n    } else if (typeof metadata !== 'object') {\n      console.warn(`Breadcrumb metadata must be an object or string, got '${metadata}'. Discarding metadata.`)\n      metadata = {}\n    }\n\n    const {\n      type = 'manual',\n      ...breadcrumbMetaData\n    } = metadata\n\n    NativeClient.leaveBreadcrumb({\n      name,\n      type,\n      metadata: serializeForNativeLayer(breadcrumbMetaData)\n    })\n  }\n\n  /**\n   * Wraps all console log functions with a function that will leave a breadcrumb for\n   * each call, while continuing to call through to the original.\n   *\n   *   !!! Warning !!!\n   *   This will cause all log messages to originate from Bugsnag, rather than the\n   *   actual callsite of the log function in your source code.\n   */\n  enableConsoleBreadcrumbs = () => {\n    CONSOLE_LOG_METHODS.forEach(method => {\n      const originalFn = console[method]\n      console[method] = (...args) => {\n        try {\n          this.leaveBreadcrumb('Console', {\n            type: 'log',\n            severity: /^group/.test(method) ? 'log' : method,\n            message: args\n              .map(arg => {\n                let stringified\n                // do the best/simplest stringification of each argument\n                try { stringified = String(arg) } catch (e) {}\n                // unless it stringifies to [object Object], use the toString() value\n                if (stringified && stringified !== '[object Object]') return stringified\n                // otherwise attempt to JSON stringify (with indents/spaces)\n                try { stringified = JSON.stringify(arg, null, 2) } catch (e) {}\n                // any errors, fallback to [object Object]\n                return stringified\n              })\n              .join('\\n')\n          })\n        } catch (error) {\n          console.warn(`Unable to serialize console.${method} arguments to Bugsnag breadcrumb.`, error)\n        }\n        originalFn.apply(console, args)\n      }\n      console[method]._restore = () => { console[method] = originalFn }\n    })\n  }\n\n  disableConsoleBreadCrumbs = () => {\n    CONSOLE_LOG_METHODS.forEach(method => {\n      if (typeof console[method]._restore === 'function') console[method]._restore()\n    })\n  }\n}\n\n/**\n * Configuration options for a Bugsnag client\n */\nexport class Configuration {\n  constructor (apiKey) {\n    const metadata = require('../package.json')\n    this.version = metadata['version']\n    this.apiKey = apiKey\n    this.delivery = new StandardDelivery()\n    this.beforeSendCallbacks = []\n    this.notifyReleaseStages = undefined\n    this.releaseStage = undefined\n    this.appVersion = undefined\n    this.codeBundleId = undefined\n    this.autoCaptureSessions = true\n    this.autoNotify = true\n    this.handlePromiseRejections = !__DEV__ // prefer banner in dev mode\n    this.consoleBreadcrumbsEnabled = false\n    this.automaticallyCollectBreadcrumbs = true\n  }\n\n  /**\n   * Whether reports should be sent to Bugsnag, based on the release stage\n   * configuration\n   */\n  shouldNotify = () => {\n    return !this.releaseStage ||\n      !this.notifyReleaseStages ||\n      this.notifyReleaseStages.includes(this.releaseStage)\n  }\n\n  /**\n   * Adds a function which is invoked after an error is reported but before\n   * it is sent to Bugsnag. The function takes a single parameter which is\n   * an instance of Report.\n   */\n  registerBeforeSendCallback = (callback) => {\n    this.beforeSendCallbacks.push(callback)\n  }\n\n  /**\n   * Remove a callback from the before-send pipeline\n   */\n  unregisterBeforeSendCallback = (callback) => {\n    const index = this.beforeSendCallbacks.indexOf(callback)\n    if (index !== -1) {\n      this.beforeSendCallbacks.splice(index, 1)\n    }\n  }\n\n  /**\n   * Remove all callbacks invoked before reports are sent to Bugsnag\n   */\n  clearBeforeSendCallbacks = () => {\n    this.beforeSendCallbacks = []\n  }\n\n  toJSON = () => {\n    return {\n      apiKey: this.apiKey,\n      codeBundleId: this.codeBundleId,\n      releaseStage: this.releaseStage,\n      notifyReleaseStages: this.notifyReleaseStages,\n      endpoint: this.delivery.endpoint,\n      sessionsEndpoint: this.delivery.sessionsEndpoint,\n      appVersion: this.appVersion,\n      autoNotify: this.autoNotify,\n      version: this.version,\n      autoCaptureSessions: this.autoCaptureSessions,\n      automaticallyCollectBreadcrumbs: this.automaticallyCollectBreadcrumbs\n    }\n  }\n}\n\nexport class StandardDelivery {\n  constructor (endpoint, sessionsEndpoint) {\n    this.endpoint = endpoint\n    this.sessionsEndpoint = sessionsEndpoint\n  }\n}\n\nclass HandledState {\n  constructor (originalSeverity, unhandled, severityReason) {\n    this.originalSeverity = originalSeverity\n    this.unhandled = unhandled\n    this.severityReason = severityReason\n  }\n}\n\n/**\n * A report generated from an error\n */\nexport class Report {\n  constructor (apiKey, error, _handledState) {\n    this.apiKey = apiKey\n    this.errorClass = error.constructor.name\n    this.errorMessage = error.message\n    this.context = undefined\n    this.groupingHash = undefined\n    this.metadata = {}\n    this.stacktrace = error.stack\n    this.user = {}\n\n    if (!_handledState || !(_handledState instanceof HandledState)) {\n      _handledState = new HandledState('warning', false, 'handledException')\n    }\n\n    this.severity = _handledState.originalSeverity\n    this._handledState = _handledState\n  }\n\n  /**\n   * Attach additional diagnostic data to the report. The key/value pairs\n   * are grouped into sections.\n   */\n  addMetadata = (section, key, value) => {\n    if (!this.metadata[section]) {\n      this.metadata[section] = {}\n    }\n    this.metadata[section][key] = value\n  }\n\n  toJSON = () => {\n    if (!this._handledState || !(this._handledState instanceof HandledState)) {\n      this._handledState = new HandledState('warning', false, 'handledException')\n    }\n    // severityReason must be a string, and severity must match the original\n    // state, otherwise we assume that the user has modified _handledState\n    // in a callback\n    const defaultSeverity = this._handledState.originalSeverity === this.severity\n    const isValidReason = (typeof this._handledState.severityReason === 'string')\n    const severityType = defaultSeverity && isValidReason\n      ? this._handledState.severityReason : 'userCallbackSetSeverity'\n\n    // if unhandled not set, user has modified the report in a callback\n    // or via notify, so default to false\n    const isUnhandled = (typeof this._handledState.unhandled === 'boolean') ? this._handledState.unhandled : false\n\n    return {\n      apiKey: this.apiKey,\n      context: this.context,\n      errorClass: this.errorClass,\n      errorMessage: this.errorMessage,\n      groupingHash: this.groupingHash,\n      metadata: serializeForNativeLayer(this.metadata),\n      severity: this.severity,\n      stacktrace: this.stacktrace,\n      user: this.user,\n      defaultSeverity: defaultSeverity,\n      unhandled: isUnhandled,\n      severityReason: severityType\n    }\n  }\n}\n"]}